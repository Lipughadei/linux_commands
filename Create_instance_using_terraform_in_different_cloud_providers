i want to create instance in AWS and Azure and GCP through terraform can you please tell me the steps to achieve this


Effortless Cloud Deployment: Terraform on AWS, GCP, and Azure


medium
Quickstart: Create a Compute Engine VM instance using Terraform


cloud.google
Terraform Cloud Infrastructure — AWS, AZURE & GCP - Medium


medium
How to create Amazon EC2 instance using Terraform - YouTube


m.youtube
Sure! Here are the steps to create instances in AWS, Azure, and GCP using Terraform. Each section includes the necessary code snippets and commands.

1. Prerequisites

Install Terraform: Download and install Terraform from the official website.

Cloud Accounts: Ensure you have active accounts on AWS, Azure, and GCP.

CLI Tools: Install the respective CLI tools for AWS, Azure, and GCP:

AWS CLI: Install AWS CLI
Azure CLI: Install Azure CLI
Google Cloud SDK: Install GCP SDK
2. Create an EC2 Instance in AWS

Configuration Steps:

Set up AWS CLI:

bash

aws configure
Enter your AWS Access Key, Secret Key, region, and output format.

Create a Terraform configuration file (main.tf):

hcl

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }
  required_version = ">= 1.2.0"
}

provider "aws" {
  region = "us-west-2"  # Change to your desired region
}

resource "aws_instance" "example_server" {
  ami           = "ami-04e914639d0cca79a"  # Amazon Linux 2 AMI
  instance_type = "t2.micro"  # Free tier eligible

  tags = {
    Name = "MyAWSInstance"
  }
}
Run Terraform commands:

bash

terraform init
terraform plan
terraform apply
Confirm the apply by typing yes.

3. Create a Virtual Machine in Azure

Configuration Steps:

Set up Azure CLI:

bash

az login
Create a Terraform configuration file (azurelab.tf):

hcl

terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 2.0"
    }
  }
  required_version = ">= 1.2.0"
}

provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "my_resource_group" {
  name     = "my-resource-group"
  location = "East US"  # Change to your desired region
}

resource "azurerm_virtual_network" "my_virtual_network" {
  name                = "my-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.my_resource_group.location
  resource_group_name = azurerm_resource_group.my_resource_group.name
}

resource "azurerm_subnet" "my_subnet" {
  name                 = "my-subnet"
  resource_group_name  = azurerm_resource_group.my_resource_group.name
  virtual_network_name = azurerm_virtual_network.my_virtual_network.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_interface" "my_nic" {
  name                = "my-nic"
  location            = azurerm_resource_group.my_resource_group.location
  resource_group_name = azurerm_resource_group.my_resource_group.name

  ip_configuration {
    name                          = "my-ip-config"
    subnet_id                    = azurerm_subnet.my_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "my_vm" {
  name                = "myVM"
  resource_group_name = azurerm_resource_group.my_resource_group.name
  location            = azurerm_resource_group.my_resource_group.location
  size                = "Standard_DS1_v2"
  admin_username      = "adminuser"
  admin_password      = "P@ssw0rd1234!"  # Use a secure password
  network_interface_ids = [
    azurerm_network_interface.my_nic.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    create_option        = "FromImage"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "18.04-LTS"
    version   = "latest"
  }
}
Run Terraform commands:

bash

terraform init

from an linux


Effortless Cloud Deployment: Terraform on AWS, GCP, and Azure


medium
How to Create AWS EC2 Instance Using Terraform - Spacelift


spacelift
Introduction to Terraform — EC2 Instance Creation using Terraform


gauravguptacloud.medium
Terraform Create VM - AWS Virtual Machine - K21Academy


k21academy
Here are the detailed steps to create instances in AWS, Azure, and GCP using Terraform from a Linux environment. Each section includes the necessary code snippets and commands.

1. Prerequisites

Install Terraform: Download and install Terraform from the official website.

Cloud Accounts: Ensure you have active accounts on AWS, Azure, and GCP.

CLI Tools: Install the respective CLI tools for AWS, Azure, and GCP:

AWS CLI: Install AWS CLI
Azure CLI: Install Azure CLI
Google Cloud SDK: Install GCP SDK
2. Create an EC2 Instance in AWS

Configuration Steps:

Set up AWS CLI:

bash

aws configure
Enter your AWS Access Key, Secret Key, region, and output format.

Create a Terraform configuration file (aws.tf):

hcl

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }
  required_version = ">= 1.2.0"
}

provider "aws" {
  region = "us-west-2"  # Change to your desired region
}

resource "aws_instance" "example_server" {
  ami           = "ami-04e914639d0cca79a"  # Amazon Linux 2 AMI
  instance_type = "t2.micro"  # Free tier eligible

  tags = {
    Name = "MyAWSInstance"
  }
}
Run Terraform commands:

bash

terraform init
terraform plan
terraform apply
Confirm the apply by typing yes.

3. Create a Virtual Machine in Azure

Configuration Steps:

Set up Azure CLI:

bash

az login
Create a Terraform configuration file (azure.tf):

hcl

terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 2.0"
    }
  }
  required_version = ">= 1.2.0"
}

provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "my_resource_group" {
  name     = "my-resource-group"
  location = "East US"  # Change to your desired region
}

resource "azurerm_virtual_network" "my_virtual_network" {
  name                = "my-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.my_resource_group.location
  resource_group_name = azurerm_resource_group.my_resource_group.name
}

resource "azurerm_subnet" "my_subnet" {
  name                 = "my-subnet"
  resource_group_name  = azurerm_resource_group.my_resource_group.name
  virtual_network_name = azurerm_virtual_network.my_virtual_network.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_interface" "my_nic" {
  name                = "my-nic"
  location            = azurerm_resource_group.my_resource_group.location
  resource_group_name = azurerm_resource_group.my_resource_group.name

  ip_configuration {
    name                          = "my-ip-config"
    subnet_id                    = azurerm_subnet.my_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "my_vm" {
  name                = "myVM"
  resource_group_name = azurerm_resource_group.my_resource_group.name
  location            = azurerm_resource_group.my_resource_group.location
  size                = "Standard_DS1_v2"
  admin_username      = "adminuser"
  admin_password      = "P@ssw0rd1234!"  # Use a secure password
  network_interface_ids = [
    azurerm_network_interface.my_nic.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    create_option        = "FromImage"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "18.04-LTS"
    version   = "latest"
  }
}
Run Terraform commands:

bash

terraform init
terraform plan
terraform apply
Confirm the apply by typing yes.

4. Create a Virtual Machine in GCP

Configuration Steps:

Set up GCP CLI:

bash

gcloud init
Create a Terraform configuration file (gcp.tf):

hcl

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
  }
  required_version = ">= 1.2.0"
}

provider "google" {
  project = "your-project-id"  # Change to your GCP project ID
  region  = "us-central1"  # Change to your desired region
}

resource "google_compute_network" "my_network" {
  name                    = "my-network"
  auto_create_subnetworks = "true"
}

resource "google_compute_instance" "my_vm" {
  name         = "my-vm"
  machine_type = "f1-micro"  # Free tier eligible
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }

  network_interface {
    network = google_compute_network.my_network.self_link
  }
}
Run Terraform commands:

bash

terraform init
terraform plan
terraform apply
Confirm the apply by typing yes.

5. Verify the Instances

AWS: Go to the AWS Management Console and navigate to the EC2 dashboard to verify the instance creation.
Azure: Go to the Azure portal and navigate to the Virtual Machines dashboard to verify the instance creation.
GCP: Go to the GCP Console and navigate to the Compute Engine dashboard to verify the instance creation.
Remember to replace the placeholders with your actual values and to use secure passwords. Also, be aware of the costs associated with running instances in the cloud.
